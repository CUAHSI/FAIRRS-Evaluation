{
  "subject": "IDA#3002##",
  "data": [
    {
      "property": "Additional_comments_model",
      "dataitem": [
        {
          "type": 2,
          "item": "View the included README file for additional notes on compiling and running"
        }
      ]
    },
    {
      "property": "Citations",
      "dataitem": [
        {
          "type": 2,
          "item": "14"
        }
      ]
    },
    {
      "property": "City",
      "dataitem": [
        {
          "type": 2,
          "item": "Cambridge"
        }
      ]
    },
    {
      "property": "CodeReviewed",
      "dataitem": [
        {
          "type": 2,
          "item": "1"
        }
      ]
    },
    {
      "property": "Code_CMT_compliant_or_not",
      "dataitem": [
        {
          "type": 2,
          "item": "No but possible"
        }
      ]
    },
    {
      "property": "Code_IRF_or_not",
      "dataitem": [
        {
          "type": 2,
          "item": "No but possible"
        }
      ]
    },
    {
      "property": "Code_openmi_compliant_or_not",
      "dataitem": [
        {
          "type": 2,
          "item": "No but possible"
        }
      ]
    },
    {
      "property": "Code_optimized",
      "dataitem": [
        {
          "type": 2,
          "item": "Multiple Processors"
        }
      ]
    },
    {
      "property": "Country",
      "dataitem": [
        {
          "type": 2,
          "item": "United States"
        }
      ]
    },
    {
      "property": "Describe_available_test_data",
      "dataitem": [
        {
          "type": 2,
          "item": "As an example of running IDA, and a test to ensure that it is running\ncorrectly, a small project is provided. Unpack it using\ntar -xjf example.tar.bz2\n\nFiles: \n  dir.bin: flow directions for a 1000 x 1000 cell landscape\n  true.bin: the correct answer, for comparison\n  run.sh: a Bash script to run the example. The script must be modified to \n    specify the path to the IDA executable.\n\nRunning:\n  Make the Bash script executable with the command chmod +x run.sh\n  Run the Bash script with ./run.sh\n  It will run IDA several times with different options, and may take some time\n  Depending on your configuration of PETSc, some of the runs may fail"
        }
      ]
    },
    {
      "property": "Describe_input_parameters_model",
      "dataitem": [
        {
          "type": 2,
          "item": "Input flow directions:\n  8 bit unsigned integers\n\n  The numbers corresponding to each of the 9 possible flow directions are\n  shown below:\n\n  32  64 128\n\n  16  0   1\n\n  8   4   2\n\n  So a cell with the value '1' means that the flow in that cell goes to the\n  East, while a value of '32' means that the cell's flow goes to the\n  North West. The value '0' implies that the cell is a sink and flow does not\n  leave it\n\n  Row major order is used."
        }
      ]
    },
    {
      "property": "Describe_key_physical_parameters",
      "dataitem": [
        {
          "type": 2,
          "item": "Flow direction: the direction to the immediately neighboring cell (N,NE,E,...) to which flow from a cell is directed.\nDrainage area: The size of the total number of cells that drain through a cell."
        }
      ]
    },
    {
      "property": "Describe_length_scale_and_resolution",
      "dataitem": [
        {
          "type": 2,
          "item": "Increasing the number of processors should allow larger/higher resolution landscapes to be considered."
        }
      ]
    },
    {
      "property": "Describe_numerical_limitations",
      "dataitem": [
        {
          "type": 2,
          "item": "If you will be processing very large landscapes then you may need to configure PETSc with the --with-64-bit-indices option."
        }
      ]
    },
    {
      "property": "Describe_output_parameters_model",
      "dataitem": [
        {
          "type": 2,
          "item": "Output drainage area, true drainage area, and initial guess:\n  64 bit float ('double')\n\n  Row major order is used.\n  The drainage area of cells with no drainage to or from them, such as ocean\n  cells, will be the area of the cell itself (1.0, if all cells are given\n  unit area)."
        }
      ]
    },
    {
      "property": "Describe_processes",
      "dataitem": [
        {
          "type": 2,
          "item": "Computation of drainage area, which, for a particular cell, is the sum of cells that drain through that cell."
        }
      ]
    },
    {
      "property": "Describe_time_scale_and_resolution",
      "dataitem": [
        {
          "type": 2,
          "item": "This code does not involve time."
        }
      ]
    },
    {
      "property": "DevelopmentCode",
      "dataitem": [
        {
          "type": 2,
          "item": "As is, no updates are provided"
        }
      ]
    },
    {
      "property": "DevelopmentCodeYearChecked",
      "dataitem": [
        {
          "type": 2,
          "item": "2020"
        }
      ]
    },
    {
      "property": "Development_still_active",
      "dataitem": [
        {
          "type": 2,
          "item": "No"
        }
      ]
    },
    {
      "property": "Email_address",
      "dataitem": [
        {
          "type": 5,
          "item": "mailto:alan_r@mit.edu"
        }
      ]
    },
    {
      "property": "End_year_development",
      "dataitem": [
        {
          "type": 1,
          "item": "2012"
        }
      ]
    },
    {
      "property": "Extended_model_description",
      "dataitem": [
        {
          "type": 2,
          "item": "IDA formulates the task of determing the drainage area, given flow directions, as a system of implicit equations. This allows the use of iterative solvers, which have the advantages of being parallelizable on distributed memory systems and widely available through libraries such as PETSc.\n\nUsing the open source PETSc library (which must be downloaded and installed separately), IDA permits large landscapes to be divided among processors, reducing total runtime and memory requirements per processor.\n\nIt is possible to reduce run time with the use of an initial guess of the drainage area. This can either be provided as a file, or use a serial algorithm on each processor to correctly determine the drainage area for the cells that do not receive flow from outside the processor's domain.\n\nThe hybrid IDA method, which is enabled with the -onlycrossborder option, uses a serial algorithm to solve for local drainage on each processor, and then only uses the parallel iterative solver to incorporate flow between processor domains. This generally results in a significant reduction in total runtime.\n\nCurrently only D8 flow directions are supported. Inputs and outputs are raw binary files."
        }
      ]
    },
    {
      "property": "First_name",
      "dataitem": [
        {
          "type": 2,
          "item": "Alan"
        }
      ]
    },
    {
      "property": "H-index",
      "dataitem": [
        {
          "type": 1,
          "item": "1"
        }
      ]
    },
    {
      "property": "Input_format_model",
      "dataitem": [
        {
          "type": 2,
          "item": "Binary"
        }
      ]
    },
    {
      "property": "Institute",
      "dataitem": [
        {
          "type": 2,
          "item": "Massachusetts Institute of Technology"
        }
      ]
    },
    {
      "property": "Last_name",
      "dataitem": [
        {
          "type": 2,
          "item": "Richardson"
        }
      ]
    },
    {
      "property": "M-quotient",
      "dataitem": [
        {
          "type": 1,
          "item": "0.08"
        }
      ]
    },
    {
      "property": "Manual_model_available",
      "dataitem": [
        {
          "type": 2,
          "item": "No"
        }
      ]
    },
    {
      "property": "ModelDomain",
      "dataitem": [
        {
          "type": 2,
          "item": "Hydrology"
        }
      ]
    },
    {
      "property": "Model_also_known_as",
      "dataitem": [
        {
          "type": 2,
          "item": "Implicit Drainage Area"
        }
      ]
    },
    {
      "property": "Model_availability",
      "dataitem": [
        {
          "type": 2,
          "item": "As code"
        }
      ]
    },
    {
      "property": "Model_keywords",
      "dataitem": [
        {
          "type": 2,
          "item": "drainage basin"
        },
        {
          "type": 2,
          "item": "watershed"
        },
        {
          "type": 2,
          "item": "hydrological"
        },
        {
          "type": 2,
          "item": "parallel computing"
        }
      ]
    },
    {
      "property": "Model_test_data",
      "dataitem": [
        {
          "type": 2,
          "item": "Media:Example.tar.bz2"
        }
      ]
    },
    {
      "property": "Model_type",
      "dataitem": [
        {
          "type": 2,
          "item": "Tool"
        }
      ]
    },
    {
      "property": "Modelautophrases",
      "dataitem": [
        {
          "type": 2,
          "item": "drainage"
        },
        {
          "type": 2,
          "item": "area"
        },
        {
          "type": 2,
          "item": "implicit"
        },
        {
          "type": 2,
          "item": "method"
        },
        {
          "type": 2,
          "item": "implicit equations"
        },
        {
          "type": 2,
          "item": "formulates the task"
        },
        {
          "type": 2,
          "item": "task of determing"
        },
        {
          "type": 2,
          "item": "ida formulates"
        },
        {
          "type": 2,
          "item": "drainage area"
        },
        {
          "type": 2,
          "item": "distributed memory systems"
        },
        {
          "type": 2,
          "item": "ida"
        },
        {
          "type": 2,
          "item": "processor"
        },
        {
          "type": 2,
          "item": "determing the drainage"
        },
        {
          "type": 2,
          "item": "ida permits large"
        },
        {
          "type": 2,
          "item": "flow"
        },
        {
          "type": 2,
          "item": "system of implicit"
        },
        {
          "type": 2,
          "item": "memory systems"
        },
        {
          "type": 2,
          "item": "flow directions"
        },
        {
          "type": 2,
          "item": "drainage basin"
        },
        {
          "type": 2,
          "item": "watershed"
        },
        {
          "type": 2,
          "item": "hydrological"
        },
        {
          "type": 2,
          "item": "parallel computing"
        }
      ]
    },
    {
      "property": "Multiple_processors_implemented",
      "dataitem": [
        {
          "type": 2,
          "item": "Distributed memory"
        }
      ]
    },
    {
      "property": "Nr-of-pubs",
      "dataitem": [
        {
          "type": 2,
          "item": "1"
        }
      ]
    },
    {
      "property": "One-line_model_description",
      "dataitem": [
        {
          "type": 2,
          "item": "An implementation of the Implicit Drainage Area method (regular and hybrid versions) for calculating drainage area from flow directions using parallel iterative solvers."
        }
      ]
    },
    {
      "property": "Output_format_model",
      "dataitem": [
        {
          "type": 2,
          "item": "Binary"
        }
      ]
    },
    {
      "property": "Post_processing_software",
      "dataitem": [
        {
          "type": 4,
          "item": "f"
        }
      ]
    },
    {
      "property": "Postal_address1",
      "dataitem": [
        {
          "type": 2,
          "item": "77 Massachusetts Ave. #54-217"
        }
      ]
    },
    {
      "property": "Postal_code",
      "dataitem": [
        {
          "type": 2,
          "item": "02139"
        }
      ]
    },
    {
      "property": "Pre_processing_software",
      "dataitem": [
        {
          "type": 4,
          "item": "f"
        }
      ]
    },
    {
      "property": "Program_license_type",
      "dataitem": [
        {
          "type": 2,
          "item": "BSD or MIT X11"
        }
      ]
    },
    {
      "property": "Programming_language",
      "dataitem": [
        {
          "type": 2,
          "item": "C"
        }
      ]
    },
    {
      "property": "Source_code_availability",
      "dataitem": [
        {
          "type": 2,
          "item": "Through CSDMS repository"
        }
      ]
    },
    {
      "property": "Source_csdms_web_address",
      "dataitem": [
        {
          "type": 2,
          "item": "https://github.com/csdms-contrib/ida"
        }
      ]
    },
    {
      "property": "Spatial_dimensions",
      "dataitem": [
        {
          "type": 2,
          "item": "2D"
        }
      ]
    },
    {
      "property": "Spatialscale",
      "dataitem": [
        {
          "type": 2,
          "item": "Continental"
        },
        {
          "type": 2,
          "item": "Landscape-Scale"
        },
        {
          "type": 2,
          "item": "Regional-Scale"
        },
        {
          "type": 2,
          "item": "Watershed-Scale"
        }
      ]
    },
    {
      "property": "Start_year_development",
      "dataitem": [
        {
          "type": 2,
          "item": "2012"
        }
      ]
    },
    {
      "property": "State",
      "dataitem": [
        {
          "type": 2,
          "item": "Massachusetts"
        }
      ]
    },
    {
      "property": "Supported_platforms",
      "dataitem": [
        {
          "type": 2,
          "item": "Linux"
        }
      ]
    },
    {
      "property": "Type_of_contact",
      "dataitem": [
        {
          "type": 2,
          "item": "Model developer"
        }
      ]
    },
    {
      "property": "Visualization_software_needed",
      "dataitem": [
        {
          "type": 4,
          "item": "f"
        }
      ]
    },
    {
      "property": "_ASK",
      "dataitem": [
        {
          "type": 9,
          "item": "IDA#3002##_QUERYf1888fbe7d01918344fe4e4160dbefd8"
        },
        {
          "type": 9,
          "item": "IDA#3002##_QUERY9fe1a60a9c1d5cb8cb4bb7a8c24e0989"
        },
        {
          "type": 9,
          "item": "IDA#3002##_QUERYa36efd2aa962064d77718f19ba6ab87d"
        }
      ]
    },
    {
      "property": "_CDAT",
      "dataitem": [
        {
          "type": 6,
          "item": "1/2013/12/31/21/36/43/0"
        }
      ]
    },
    {
      "property": "_INST",
      "dataitem": [
        {
          "type": 9,
          "item": "Pages_using_duplicate_arguments_in_template_calls#14##"
        },
        {
          "type": 9,
          "item": "Models#14##"
        }
      ]
    },
    {
      "property": "_LEDT",
      "dataitem": [
        {
          "type": 9,
          "item": "WikiSysop#2##"
        }
      ]
    },
    {
      "property": "_MDAT",
      "dataitem": [
        {
          "type": 6,
          "item": "1/2020/9/17/2/17/21/0"
        }
      ]
    },
    {
      "property": "_SKEY",
      "dataitem": [
        {
          "type": 2,
          "item": "IDA"
        }
      ]
    }
  ],
  "sobj": [
    {
      "subject": "IDA#3002##_QUERYf1888fbe7d01918344fe4e4160dbefd8",
      "data": [
        {
          "property": "_ASKDE",
          "dataitem": [
            {
              "type": 1,
              "item": "0"
            }
          ]
        },
        {
          "property": "_ASKFO",
          "dataitem": [
            {
              "type": 2,
              "item": "plainlist"
            }
          ]
        },
        {
          "property": "_ASKSI",
          "dataitem": [
            {
              "type": 1,
              "item": "1"
            }
          ]
        },
        {
          "property": "_ASKST",
          "dataitem": [
            {
              "type": 2,
              "item": "[[:Model:IDA]]"
            }
          ]
        },
        {
          "property": "_SKEY",
          "dataitem": [
            {
              "type": 2,
              "item": "IDA# QUERYf1888fbe7d01918344fe4e4160dbefd8"
            }
          ]
        }
      ]
    },
    {
      "subject": "IDA#3002##_QUERY9fe1a60a9c1d5cb8cb4bb7a8c24e0989",
      "data": [
        {
          "property": "_ASKDE",
          "dataitem": [
            {
              "type": 1,
              "item": "1"
            }
          ]
        },
        {
          "property": "_ASKFO",
          "dataitem": [
            {
              "type": 2,
              "item": "plainlist"
            }
          ]
        },
        {
          "property": "_ASKSI",
          "dataitem": [
            {
              "type": 1,
              "item": "5"
            }
          ]
        },
        {
          "property": "_ASKST",
          "dataitem": [
            {
              "type": 2,
              "item": "[[User:+]] [[First name member::Alan]] [[Last name member::Richardson]]"
            }
          ]
        },
        {
          "property": "_SKEY",
          "dataitem": [
            {
              "type": 2,
              "item": "IDA# QUERY9fe1a60a9c1d5cb8cb4bb7a8c24e0989"
            }
          ]
        }
      ]
    },
    {
      "subject": "IDA#3002##_QUERYa36efd2aa962064d77718f19ba6ab87d",
      "data": [
        {
          "property": "_ASKDE",
          "dataitem": [
            {
              "type": 1,
              "item": "1"
            }
          ]
        },
        {
          "property": "_ASKFO",
          "dataitem": [
            {
              "type": 2,
              "item": "ul"
            }
          ]
        },
        {
          "property": "_ASKSI",
          "dataitem": [
            {
              "type": 1,
              "item": "5"
            }
          ]
        },
        {
          "property": "_ASKST",
          "dataitem": [
            {
              "type": 2,
              "item": "[[Model:+]] [[First name::Alan]] [[Last name::Richardson]]"
            }
          ]
        },
        {
          "property": "_SKEY",
          "dataitem": [
            {
              "type": 2,
              "item": "IDA# QUERYa36efd2aa962064d77718f19ba6ab87d"
            }
          ]
        }
      ]
    }
  ],
  "serializer": "SMW\\Serializers\\SemanticDataSerializer",
  "version": 2
}